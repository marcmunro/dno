<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE book [

<!ENTITY % dno_vars SYSTEM "dno_vars.ent">
%dno_vars;


]>

<!--
       The docbook5 dno user guide.
       This is part of dno, the Arduino build system.

       Copyright (c) 2025 Marc Munro
       Author:  Marc Munro
       License: GPL-3.0

-->

<book xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Dno (&version;) User Guide</title>
    <subtitle>
      The <command>dno</command> command-line build system for Arduino
      software
    </subtitle>
    <edition>&version;</edition>
    <pubdate>&release_date;</pubdate>
  </info>
  <preface xml:id="introduction">
    <info>
      <title>Introduction to Dno</title>
    </info>
    <para>
      <command>Dno</command>, pronounced dee-no, is a command-line
      tool for building software for Arduino and related single board
      computers.  It is intended as an alternative to the Arduino
      <acronym>IDE</acronym> for building, loading and testing Arduino
      software.
    </para>
    <para>
      It does not provide an editing environment. Instead, by allowing
      builds to be executed as simple commands, developers are free to
      use the editor/programming environment of their choice.
    </para>
    <para>
      It also goes beyond what the original Arduino
      <acronym>IDE</acronym> offers by supporting unit testing of
      libraries and the creation of <link
      xlink:href="https://www.doxygen.nl/index.html">Doxygen</link>-based
      documentation of code.  In short, it aims to support the
      creation of professional-quality software for Arduino platforms.
    </para>
    <para>
      Finally, it aims to be as simple to use as possible - requiring
      minimal configuration while providing maximal flexibility.
    </para>
  </preface>
  <xi:include href="installation.xml"/>
  <xi:include href="toolsets.xml"/>
  <xi:include href="getting_started.xml"/>
  <xi:include href="a_little_exploration.xml"/>
  <xi:include href="directory_system.xml"/>
  <xi:include href="libraries.xml"/>
  <xi:include href="documentation.xml"/>
  <xi:include href="other.xml"/>
  <chapter>
    <title>Developing and Debugging Dno</title>
    <para>
      If you want to hack on dno, feel free.  The
      <literal>dno</literal> executable is a self-executing Makefile
      and aims to be well commented.
    </para>
    <para>
      The various helper tools (see the man page appendices) are all
      shell and awk scripts, and again should be either well-enough
      documented, or simple enough that they are relatively easy to
      work on.
    </para>
    <para>
      To get started with hacking on <literal>dno</literal> you should
      familiarise yourself with its debug variables which provide
      various degrees of feedback:
      <itemizedlist>
	<listitem>
	  <literal>VERBOSE</literal>;
	</listitem>
	<listitem>
	  <literal>REPORT</literal>;
	</listitem>
	<listitem>
	  <literal>DEBUG</literal>;
	</listitem>
	<listitem>
	  <literal>SHOW_RULES</literal>.
	</listitem>
      </itemizedlist>
    </para>
    <para>
      The real key to understanding dno, is the
      <literal>ALL_BUILD_RULES</literal> macro.  When you understand
      how this is used, along with the way that make restarts when
      dependency files (included makefiles) are updated, then you will
      get dno.
    </para>
    <section>
      <title>On clones/forks,  autotools and configure</title>
      <para>
	Once you have pulled, cloned or forked dno, you only need to
	run <literal>./configure</literal> once.  After that, you can
	just run <literal>make</literal> and make will figure out when
	<literal>aclocal</literal>, <literal>autoconf</literal> and
	<literal>./configure</literal> need to be run.
      </para>
      <para>
	<literal>make</literal> cannot figure this out for itself in a
	freshly cloned/pulled directory as file timestamps are not
	preserved (as far as I can tell - MM) by
	<literal>git</literal>.
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Why?</title>
    <para>
      <emphasis>This is one developer's Point Of View</emphasis>:
    </para>
    <para>
      Dno was created out of frustration with the Arduino IDE.  In
      particular:
      <itemizedlist>
	<listitem>
	  <para>
	    its slowness;
	  </para>
	  <para>
	    The IDE is slow everywhere.  It's slow to start, slow to
	    compile, slow to do anything.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    its clunkiness;
	  </para>
	  <para>
	    Everything about it is clunky.  The tiny edit window.  The
	    weird buttons.  The way that it always starts up halfway
	    between my 2 monitors.  The menu entries that look like
	    headings...
	  </para>
	</listitem>
	<listitem>
	  <para>
	    its attitude;
	  </para>
	  <para>
	    Here's how you write software: you bring up a really
	    crappy editor that has no interest in how you want to use
	    your filesystem and that does not have the power of the
	    tools that you normally use.  No, you can't use standard
	    tools.  And, no you can't build from the command line: well,
	    you can but the commands are insane.
	  </para>
	  <para>
	    <quote>But this is the right way to do it.  In fact it's
	    the only way.</quote>
	  </para>
	  <para>
	    That's the attitude I'm talking about.  And it sucks.
	  </para>
	  <para>
	    Many IDEs have that attitude.  And many of their users
	    buy-in to it.  You will often hear the question,
	    <quote>why would you not use
	    <emphasis>whatever</emphasis>?</quote>, when the real
	    question should be <quote>why can't I use tools that I am
	    familiar with?</quote>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    its inflexibility.
	  </para>
	  <para>
	    The editor has no flexibility.  It is neither powerful nor
	    customisable.  It doesn't, by default, access your normal
	    files, and creates new files where <emphasis>it</emphasis>
	    wants to, taking no account of the way you want your
	    directory structured.
	  </para>
	  <para>
	    The IDE provides no way to actually develop libraries.
	    You can write them, but you can't test them or document
	    them.  It's a toy development environment for toy
	    devlopment.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <section>
      <title>And How?</title>
      <para>
	So, I didn't like the IDE.  I tried using a proper editor and
	cutting and pasting my code into the IDE.  That sucked.
      </para>
      <para>
	I know there are other IDEs, like eclipse, that maybe don't
	suck, but I still don't like IDEs.
      </para>
      <para>
	I tried using the CLI.  But the commands are pure mental: way
	too many parameters.  That sucked.  Even with some moderately
	smart scripts to run it all.
      </para>
      <para>
	I found <literal>Arduino.mk</literal>.  Finally, something that
	didn't suck.  It showed that normal tools like
	<literal>make</literal> <emphasis>could</emphasis> be used.
	But it was really stuck in the <literal>avr</literal> world,
	and it still required a bit too much hand-holding, particulary
	around library use.
      </para>
      <para>
	I looked at hacking it, and discovered a lot about
	<literal>make</literal> that I didn't know.  It was a very
	good piece of work, but still not quite right.
      </para>
      <para>
	I developed my own version of <literal>Arduino.mk</literal>
	that tackled some of the problems, but it still didn't feel
	right.  Copies of the makefile had to be put in place in each
	directory.  But library discovery worked pretty well.
      </para>
      <para>
	It all came together when I was trying to parse the
	<literal>platform.txt</literal> file.  I finally realised that
	a simple transform could turn it into makefile syntax.  And
	then I discovered make's <literal>eval</literal> function and
	everything was suddenly possible.
      </para>
    </section>
  </chapter>
  <xi:include href="parts/dno.xml"/>
  <xi:include href="parts/dno_bpp.xml"/>
  <xi:include href="parts/dno_checksize.xml"/>
  <xi:include href="parts/dno_commands_for.xml"/>
  <xi:include href="parts/dno_dirinfo.xml"/>
  <xi:include href="parts/dno_requote.xml"/>
  <xi:include href="parts/BOARD_INFO.xml"/>
  <xi:include href="parts/BOARD_OPTIONS.xml"/>
  <xi:include href="parts/BOARD_TYPE.xml"/>
  <xi:include href="gpl-3.0.xml"/>
</book>
