#! /usr/bin/env bash
#
#       dno_bpp - Board and platform parser for dno
# 
#       Copyright (c) 2024,2025 Marc Munro
#       Author:  Marc Munro
# 	License: GPL-3.0
#

# The primary purpose of dno_bpp is to create a dno BOARD_INFO file for
# a given Arduino board-type.  BOARD_INFO files contain all of the
# definitions needed to compile, upload, etc software for a given
# Arduino-like board.
#
# This is intended solely for use by dno.

ARDUINO_BOARDS_FILE=@BOARDS_TXT@
EXTRA_BOARDS_FILE=@DNO_EXTRA_BOARDS_FILE@

DNO_VERSION=@DNO_VERSION@
DNO_IDE_VERSION=@DNO_IDE_VERSION@
HOST_OS=@HOST_OS@

##
# usage
#
# Print a usage message.
#
usage()
{
    echo "dno_bpp [options]...
  Boards and platform parser for dno.

  Parses the boards.txt and platform.txt files to create
  inclusion-files for dno (make), to identify the available boards,
  and to create the BOARD_TYPE and BOARD_INFO files.

  Options:

  --board, -b board    
  	      Specify a board to be searched for in the boards.txt file(s)
              If board is in the form x.y, then cpu will be
              determined from y, and board from x.
  --cpu, -c cpu      
  	      Specify a cpu to be searched for in the boards.txt file(s)
  --dir, -d dir      
  	      Specify a directory to search for boards.txt  This may
              be specified multiple times.
  --friendly, -f	      
  	      Friendly format the output
  --help, -h  Help
  --no, --nodefaults, -n
  	      Do not use the system default dno paths for the boards.txt
  	      files.  You must provide at least one explicit --dir
  	      option in this case.
  --params, -p
	      Print build parameters for inclusion into a makefile,
  	      etc
  --quiet, -q Be silent
  --type, -t  Print the board type definition for the BOARD_TYPE file
  --version, -v	      
  	      Print version information and exit.
  -x
	      Provide directory path discovery services to an inferior
	      version of this script that is determining build parameters.

"
}

##
# version
#
# Print version information and exit.
#
version()
{
    echo "`basename $0`: version ${DNO_VERSION} (part of the dno toolset)"
    exit
}

##
# default_board_paths
# Echo, to stdout, the paths to boards.txt files determined from
# the dno installation and the contents of EXTRA_BOARDS_FILE.
#
default_board_paths () {
    if [ -f "${ARDUINO_BOARDS_FILE}" ]; then
        echo $(printf %q "${ARDUINO_BOARDS_FILE}")
    fi
    if [ -f "${EXTRA_BOARDS_FILE}" ]; then
        sed -e 's/^#.*//' <"${EXTRA_BOARDS_FILE}" |
	    while  read dir; do
		# Force tilde expansion
		dir=${dir/#\~/$HOME}
	        if [ -f "${dir}/boards.txt" ]; then
                    echo $(printf %q "${dir}/boards.txt")
		fi
	    done 
    fi
}

##
# add_board_path
#
# Echo an updated board_paths value.
# Params:
#   $1 - a new board directory or file to add in
#   $2 - the current list of paths
#
# stdout:
#   Space-separated list of $2 and a validated $1
# stderr:
#   Error messages associated with non-existence, etc, of $1
# result:
#   Success or 1 if $1 is invalid
#
add_board_path()
{
    if [ "a" = "a$1" ]; then
	# Nothing to be done
	echo $2
	return 0
    fi
    if [ "b`basename $1`" = "bboards.txt" ]; then
	if [ -r "$1" ]; then
	    echo $2 $1
	    return 0
	else
	    echo "`basename $0`: $1 is not a readable file" 1>&2
	fi
    elif [ -d "$1" ]; then
	if [ -f "$1/boards.txt" ]; then
	    echo $2 $1/boards.txt
	    return 0
	else
	    echo "`basename $0`: $1 does not contain a boards.txt file" 1>&2
	fi
    else
	echo "`basename $0`: $1 is not a directory" 1>&2
    fi
    echo $2
    return 1
}


##
# identify_boards
# Simple parser for boards.txt files.  This can: list the available
# boards, with cpu options; confirm that a board exists, is fully
# specified and identify the boards.txt file in which it is defined.
# In the event of multiple definitions being found for a board, the
# latest one found takes precedence.
# 
# Params:
#   $*    - a list of variable definitions as follows:
#           BOARD=boardname
#           CPU=cpuname
#           DEFINITION=yes
#           FRIENDLY=yes
#           SILENT=yes
#           PRINT_FILENAME=yes
#   ${!#} - (the last argument) a list of paths from which to find our
#           boards.txt files 
#
# stdout:
# result:
#   Success if only a single board is found, otherwise 1
#
identify_boards()
{
    gawk '
	function board_match(board) {
	    # Determine whether board matches what we are looking
	    # for.  It does if we are not looking for anything
	    # specific.
	    return (BOARD == "") || (board ~ "^" BOARD "$")
	}
        function cpu_match(board, cpu) {
	    # Determine whether board matches what we are looking
	    # for.  It does if we are not looking for anything
	    # specific. 
	    return board_match(board) && 
	           ((CPU == "") || (cpu ~ "^" CPU "$"))
	}
	function print_board(board, board_descr) {
	    if (CPU == "") {
	        if (DEFINITION) {
		    if (!(board in cpus)) {
	                print board 
		    }
		}
		else if (FRIENDLY) {
		    printf("%-*s  %s\n", id_col_width, board, board_descr)
		}
		else if (!SILENT){
	            print board ".name=" board_descr
		}
	    }
	}
	function print_cpu(board, cpu, cpu_descr) {
	    if (DEFINITION) {
	        # Print Definition version
	        print board "." cpu
	    }
	    else if (FRIENDLY) {
		printf("  %-*s  %s\n", id_col_width, cpu, cpu_descr)
	    }
	    else if (!SILENT){
	        print board ".menu.cpu." cpu "=" cpu_descr
	    }
	}
	function record_width(id,   len) {
	    len = length(id)
	    if (len > id_col_width) {
	        id_col_width = len
	    }
	}
	BEGIN {
	    board_matches = 0 # Count of distinct boards matched
	    cpu_matches = 0   # Ditto for cpus
	    id_col_width = 20 # Width of widest board or cpu name

	    # Arrays:
	    #  boards[]     board descriptions indexed by board name
	    #  sources[]    filenames (source of board info) indexed
	    #               by board name
	    #  cpus[][]     cpu descriptions indexed by board and cpu names
	    #  cpu_sources[][] filenames for cpu definitions
	}
    	/.name=/ {
	    board = gensub(/\.name=.*/, "", "1")
	    if (board_match(board)) {
	        record_width(board)
	        matched_board = board
	        board_descr = gensub(/.*\.name=/, "", "1")
		if (!(board in boards)) {
		    # Board may be already recorded for another input
		    # file.  
		    board_matches = board_matches + 1
		}
		boards[board] = board_descr
		sources[board] = FILENAME
	    }
	}
	/\.menu\.cpu\.[^\.]*=/ {
	    # Match a cpu definition  Some boards are identified by
	    # the combination of board and cpu, and some only by the
	    # board. 
	    if ($0 ~ "^" matched_board "\\.") {
		cpu = gensub(/.*.menu.cpu.([^=]*).*/, "\\1", "1")
		if (cpu_match(matched_board, cpu)) {
	            record_width(cpu)
		    if (!(cpus[matched_board][cpu])) {
		        cpu_matches++
			cpu_descr = gensub(/[^=]*=/, "", "1")
		        cpus[matched_board][cpu] = cpu_descr
		    }
		    cpu_sources[matched_board][cpu] = FILENAME
		}
	    }
	}
	END {
	    # TODO: Sort the following
	    for (board in boards) {
	        print_board(board, boards[board])
		source_filename = sources[board]
		if (board in cpus) {
		    for (cpu in cpus[board]) {
			print_cpu(board, cpu, cpus[board][cpu])
		        source_filename = cpu_sources[board][cpu]
		    }
		}
	    }
	    if ((board_matches == 1) &&
	        ((cpu_matches == 0) || (cpu_matches == 1)))
	    {
	        # We have a single match.  We may want to print the filename
		if (PRINT_FILENAME) {
		    print source_filename
		}
		exit(0)
	    }
	    exit(1)
	}
    ' $* /dev/null
    return $?
}

##
# platform_parameters
#
# Echo initial, fundamental, parameter definitions.
# Params:
#    $1 - path to boards.txt
#    $2 - path to platform.txt
#    $3 - board identifier
#    $4 - optional cpu identifier
#
# stdout:
#    Initial definitions for our BOARD_INFO file.
#
platform_parameters()
{
    if [ "c$4" = "c" ]; then
	echo "BOARD_TYPE =" $3
    else
	echo "BOARD_TYPE =" $3.$4
    fi
    echo "BOARD_FILE = $1"
    echo "PLATFORM_FILE = $2"
    echo "runtime.os = ${OS}"
}

##
# file_parser
#
# Parameters:
#    BOARD=<board name>
#    OS=<host operating system string (linux or macosx)>
#    PLATFORM_PATH=<path to the platform.txt file>
#    ARCH_NAME=<name of arduino architecture for board>
#    HARDWARE_PATH=<path to the arduino hardware directory>
#    DNO_IDE_VERSION=<version number for the installed version of dno>
#    THIS_SCRIPT=<path to this script - used for a recursive call>
#    platform_file    - the plaform.txt file
#    [platform_local] - any platform.local.txt file
#    board_file       - the boards.txt file
# Result:
#    Output is written to stdout.  No errors are expected to be
#     returned.
#
# Extract from and translate our input files (platform.txt,
# platform.local.txt and boards.txt), to create a BOARDS_INFO file
# that can be read by make and that will provide the definitions
# necessary to allow dno to build arduino software.
# There are a number of distinct jobs that this does:
#  - extract from boards.txt only those entries that apply for our
#    selected (arduino) board;
#  - convert entries into a form that make can directly read;
#  - identify default menu selections;
#  - OS-ify OS-specific definitions (ie make the appropriate
#    OS-sepcific definition take effect over any generic one);
#  - provide definitions for unspecified build paths;
#  - provide a template value for the fqbn definition .
#
file_parser()
{
    awk '
	# Replace the substring in VALUE starting at FROM and of
	# length LEN, with the string WITH.
	#
	function replace_str(value, from, len, with) {
	   return substr(value, 1, from - 1) with substr(value, from + len)
	}

	# Expand the definition of DEF.  This replaces variables that
	# appear in the definition with their expanded values.  Any
	# variables that cannot be expanded get recorded as undefined,
	# and are replaced with a bracketed version: [def].
	# Additionally the array "used_in" is updated to show which
	# definitions are used in which other definitions.
	#
	function expand_definition(def,
				   matchpos, updated, rlength, rhs) {
	    updated = 0
	    if (!(def in definitions)) {
	        undefined_entries[def] = 1
		definitions[def] = "[" def "]"
		return definitions[def]
	    }
	    rhs = definitions[def]
	    # match the next (unembedded) variable definition
	    while (matchpos = match(rhs, "{[^{}]*}")) {
		rlength = RLENGTH
	        new_def = substr(rhs, matchpos + 1, rlength - 2)
		used_in[new_def][def] = 1
		new_value = expand_definition(new_def)
		rhs = replace_str(rhs, matchpos, rlength, new_value)
		updated = 1		
	    }
	    if (updated) {
	        definitions[def] = rhs
	    }
	    return rhs
       	}

	# Attempt to identify a file or sub-path from the path (def)
	# that is to be defined/discovered.  Eg if we have the
	# definition: something=[xyz.path]/a/wibble, then we will look
	# for a directory that contains the subpath a/wibble, and that
	# should be the directory for xyz.path.
	# Due to the vagaries of quoting (our definitions contain
	# quoted strings that themselves contain quoted strings, this
	# is slightly tricky.  The code that follows is not foolproof
	# but appears to work well enough.
	#
	function subpath_for(def, user_def) {
	   rhs = definitions[user_def]
	   after_def = gensub(".*\\[" def "\\]\"?", "", "1", rhs)

	   # If after_def ends in a quote that is not specific to an
	   # expanded definition, we eliminate that quote as it will
	   # confuse what follows. 
	   after_def = gensub(/([\) \t])"[ \t]*$/, "\\1", "1", after_def)
	   if (match(after_def, /^[^"]*"([^"]*"[^"]*")*[^"]*$/)) {
	       # There are an odd number of quotes in after_def.  Assume
	       # that the first quote matches something earlier in the
	       # string.  Deal with this by prepending a quote to
	       # after_def 
	       after_def = "\"" after_def
	   }
	   # Now eliminate anything after unquoted whitespace
	   return gensub(/^((("[^"]*")|([^ \t"]*))*).*/, "\\1", "1", after_def)
	}

	function all_uses_of(def, uses,
		             this) {
	    if (def in used_in) {
	    	for (this in used_in[def]) {
	            if (!(this in uses)) {
		       uses[this] = 1
		       all_uses_of(this, uses)
		    }
		}
	    }
	}
		             
	# Attempt to determine paths for an undefined definition def.
	# We identify potential paths by calling our enclosing script
	# (dno_bpp) with the -x parameter.
	#
	function runtime_paths(def,
			       uses, subpath, subpaths, path, paths,
			       found_count, found_path) {
	    split("", uses)
	    all_uses_of(def, uses)
	    for (this in uses) {
		subpath = subpath_for(def, this)
		if (subpath && !(subpath ~ /\\/)) { # Ignore windows paths
		    subpaths[subpath] = 1
		}
	    }
	    for (subpath in subpaths) {
		while (THIS_SCRIPT " -x \"" base_search_path \
		       "\" \"" subpath "\"" | getline path > 0)
		{
		    paths[path]++
		    if (paths[path] >= found_count) {
		        found_count = paths[path]
			found_path = path
		    }
		}
	    }
	    if (found_path) {
	        for (path in paths) {
		    if (path == found_path) {
		        print def " = " path
		    }
		    else {
		        print "# " def " = " path 
		    }
		}
	    }
	}
	function build_variant_path() {
	    return PLATFORM_PATH "/variants/" definitions["build.variant"] 
	}
	function menu_entry(menu_line) {
	    # Return the menu entry name from a menu_line
	    # The menu line is in the form menu.ENTRY...

	    return gensub("^menu\\.([^\\.]*).*", "\\1", 1, menu_line)
	}
	function menu_option(menu_line) {
	    # Return the menu option name from a menu_line
	    # The menu line is in the form menu.entry.OPTION...

	    return gensub("^menu\\.[^\\.]*.([^\\.=]*).*", "\\1", 1, menu_line)
	}
	function menu_selection(menu_line) {
	    # Return the menu selection details from a menu_line
	    # The menu line is in the form menu.entry.option.SELECTION

	    return gensub("^menu\\.[^\\.]*.[^\\.]*\\.", "", 1, menu_line)
	}
        (FNR == 1) {
	    print ""
	    print "#"
	    print "# From: " FILENAME
	    print "#"
	    print ""
	    split("", ossified) # Init the ossified array
	}
	(FILENAME ~ "/boards.txt") {
	    # Much of boards.txt needs to be ignored - ie the stuff
	    # for boards that we are not using.
	    if  ($0 ~ "^" BOARD "\\.") {
	        # Matching board entries have the board prefix removed.
	        sub("^" BOARD "\\.", "")
	    }
	    else if ($0 ~ /^menu./) {
	        # Non-board specific menu entries are based verbatim
	    }
	    else {
	        # Anything else is ignored
	        next
	    }
	}
	/^[ \t]*#/ {
	    # This is a comment line.  Do not process it, but copy it.
	    print
	    next
	}
	/^[ \t]*$/ {
	    # This is an empty line.  Ditto.
	    print
	    next
	}
    	{
	    # OS-ify our entry.  This means replacing OS-specific
	    # entries for our OS with non-OS-specific entries and
	    # ensuring that original non-OS-specific entries do not
	    # subsequently appear.
	    defname_no_os = gensub(/^(.*)\.[^\.]*=.*/, "\\1", "1")
	    if (defname_no_os in ossified) {
	       print "# " $0
	       next	        
	    }
	    if ($0 ~ "\\." OS "=") {
	       print "# " $0
	       sub("\\." OS "=", "=")
	       lhs = gensub(/^([^=]*).*/, "\\1", "1")
	       ossified[lhs] = 1
	    }
    	}
    	/=/ {
	    # Record this definition, so we can later expand our
	    # definitions to help identify tool paths.
	    lhs = gensub(/^([^=]*).*/, "\\1", "1")
	    rhs = gensub(/^[^=]*=/, "", "1")
	    definitions[lhs] = rhs
	    
	    # This make-ifies the incoming definitions, turning {...}
	    # into $(...), which make can easily deal with.
    	    gsub(/{/, "$(")
	    gsub(/}/, ")")
	}
	{
	    # Finally, we escape quotes that appear within quoted
	    # strings.  This is far from foolproof and there will be
	    # pathological cases that this fails for.  With luck they
	    # will not ever appear in our input files.
	    if ($0 ~ /^[^"]*"[^"]*"[@-]*\$\(/) {
	        # We match if the first quote on the line is
		# eventually followed by what looks like a quoted
		# variable.
		start = gensub(/(^[^"]*").*/, "\\1", "1") # up to 1st quote
		remainder = gensub(/^[^"]*"/, "", "1")    # after 1st quote

		# Replace every pair of quotes around a variable.
		remainder = gensub(/"([@-]*\$\([^"]*)"/, "\\\\\"\\1\\\\\"",
			           "g", remainder)
	        print start remainder
	    }
	    else {
	        print
	    }
	    if ($0 ~ "^menu\\.[^\\.]*\\.") {
	        # Menu entries are tricky.  The first occurrence of a
		# particular entry provides the default value.  Entries that
		# match that value name provide definitions which should be
		# made in our output.
		entry = menu_entry($0)
		option = menu_option($0)
		if (entry != cur_entry) {
		    # This is the first entry for this menu so, by default,
		    # this is the selected option.  We make this
		    # explicit for easier handling later.
		    cur_entry = entry
		    selected_option = option
		    print "menuselection." entry "=" option
		}
		else {
		    if (option == selected_option) {
		        print menu_selection($0)
		    }
		}
	    }
	}
	END {
	    # Deal with undefined references
	    for (def in definitions) {
	        expand_definition(def)
	    }
	    # Deal with some specific values
	    if ("runtime.platform.path" in undefined_entries) {
		print "runtime.platform.path = " PLATFORM_PATH
		delete undefined_entries["runtime.platform.path"]
	    }
	    if (("runtime.hardware.path" in undefined_entries) ||
	        !("runtime.hardware.path" in definitions)) {
		print "runtime.hardware.path = " HARDWARE_PATH
	        definitions["runtime.hardware.path"] = HARDWARE_PATH
		delete undefined_entries["runtime.hardware.path"]
	    }
	    if ("build.arch" in undefined_entries) {
		print "build.arch = " toupper(ARCH_NAME)
	    }
	    print "build.source.path=."
	    print "build.variant.path=" build_variant_path()
	    if ("runtime.ide.version" in undefined_entries) {
	        print "runtime.ide.version = " DNO_IDE_VERSION
	    }
	    base_search_path = gensub(/^"(.*)"$/, "\\1", "1",
	    		              definitions["runtime.hardware.path"])
	    base_search_path = gensub(/\/[^\/]*\/?$/, "", "1", base_search_path)

	    print ""	    
	    print "# Paths below have been discovered by dno_bpp:"
	    print "# If a commented path is more appropriate for you, then"
    	    print "# copy it into your platform.local.txt file"
	    print "#"
	    for (def in undefined_entries)  {
	        if (def ~ /^runtime\..*\.path/) {
		    runtime_paths(def)
		}
	    }
	    print "build.fqbn=$(build.variant):$(build.core):"\
	    	  "$(build.target)$(build.menu_selections)"
	}
    ' "$@"
    return $?
}

##
# arch_path
# Identify the arduino architecture directory from the platform path.
#
# Params:
#   $1 - the directory of the platform.txt file
#
# stdout:
#   The arduino arch path
# 
arch_path()
{
    # We may have a dir structure of hardware/arch/[version]/
    # or hardware/vendor/arch/[version]/, or version may be missing.
    if echo `basename "$1"` | grep -q "^[0-9\.]*$"; then
	dirname "$1"
    else
	# ...version may be missing
	echo $1
    fi
}

##
# hardware_path
#
# Identify the arduino hardware directory from the arch path.
#
# Params:
#   $1 - the arch path directory (as returned by the arch_path function)
#
# stdout:
#   The arduino arch path
#
hardware_path()
{
    dir=`dirname "$1"`
    if [ `basename "${dir}"` = "hardware" ]; then
	echo ${dir}
	return 0
    fi
    dir=`dirname "${dir}"`
    if [ `basename "${dir}"` = "hardware" ]; then
	echo ${dir}
	return 0
    fi
    echo "`basename $0`: Unable to identify hardware path" 1>&2
    return 1
}

##
# parse_board_platform
#
# Generate the contents of a BOARD_INFO file based on the parameters
# and any platform.local.txt files.  See file_parser for more.
#
# Params:
#    $1 - path to boards.txt
#    $2 - board identifier
#    $3 - optional cpu identifier
#
parse_board_platform()
{
    platform_path=`dirname $1`
    platform_file="${platform_path}/platform.txt"
    board_file="$1"
    board="$2"
    shift
    
    platform_parameters "${board_file}" "${platform_file}" "$@"
    if [ -f "./platform.local.txt" ]; then
        platform_local=./platform.local.txt
    else
        platform_local=""
    fi

    arch_path=`arch_path ${platform_path}`
    arch_name=`basename ${arch_path}`
    hardware_path=`hardware_path ${arch_path}`
    status=$?
    if [ "${status}" -ne 0 ]; then
	return ${status}
    fi

    file_parser BOARD="${board}" OS=${HOST_OS} \
		PLATFORM_PATH="${platform_path}" \
		ARCH_NAME="${arch_name}" HARDWARE_PATH="${hardware_path}" \
		DNO_IDE_VERSION=${DNO_IDE_VERSION} \
		THIS_SCRIPT="$0" \
    	        "${platform_file}" ${platform_local} "${board_file}"
    return $?
}

##
# find_paths
#
#   $1 - directory from which to look for a file or directory
#   $2 - a file or directory to look for with $1
#
# stdout:
#   The full path for $2 within directory $1.
#
# Attempt to determine a file path to be added to our BOARD_INFO
# file.   This is called when this script is invoked with the -x
# option.  It will be called recursively from within our file_parser
# function. 
#
find_paths()
{
    {
	if [ -r "$1"/"$2" ]; then
	    echo "$1"/"$2"
	fi
	{
	    ls -1d "$1"/*/"$2"
	    ls -1d "$1"/*/*/"$2"
	    ls -1d "$1"/*/*/*/"$2"
	} 2>/dev/null | grep -v '\*'
    } |  sed -e "s!$2\$!!"
}


##
# Script starts here.

# Handle options

board_paths=""
board=""
cpu=""
friendly=""
use_dno_default_paths=yes
definition=""
verify=""
quiet=""
params=""
findpaths=""
while getopts "b:c:d:fhnpqtvx-:" opt; do
    case "${opt}" in
	-)
	    case "${OPTARG}" in
		board)
		    board="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
		    ;;
		board=*)
		    board=${OPTARG#*=}
		    ;;
		cpu)
		    cpu="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
		    ;;
		cpu=*)
		    cpu=${OPTARG#*=}
		    ;;
		dir)
		    board_paths=`add_board_path ${OPTARG#*=} "${board_paths}"`
		    ;;
		dir=*)
		    board_paths=`add_board_path ${OPTARG#*=} "${board_paths}"`
		    ;;
		friendly)
	            friendly="FRIENDLY=yes"
		    ;;
		help)
		    usage
		    exit 0
		    ;;
		no | nodefaults)
		    use_dno_default_paths=no
		    ;;
		params)
		    params="PARAMETERS=yes"
		    ;;
		quiet)
 		    quiet="SILENT=yes"
		    ;;
		type)
		    definition="DEFINITION=yes"
		    ;;
		version)
		    version
		    ;;
		*)
		    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "`basename $0`: Unknown option --${OPTARG}" 1>&2
			exit 2
                    fi
		    ;;
	    esac
	    ;;
	b)
	    board="${OPTARG}"
	    ;;
	c)
	    cpu="${OPTARG}"
	    ;;
	d)
	    board_paths=`add_board_path ${OPTARG#*=} "${board_paths}"`
	    ;;
	f)
	    friendly="FRIENDLY=yes"
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	n)
	    use_dno_default_paths=no
	    ;;
	p)
	    params="PARAMETERS=yes"
	    ;;
	q)
	    quiet="SILENT=yes"
	    ;;
	t)
	    definition="DEFINITION=yes"
	    ;;
	v)
	    version
	    ;;
	x)
	    findpaths="yes"
	    ;;
	*)
	    echo "`basename $0`: Unexpected option: -${OPTARG}" 1>&2
	    exit 1
	    ;;
    esac
done
shift $((OPTIND-1))

if [ "${findpaths}" = "yes" ]; then
    # Run in path "finder" mode.  This is called recursively from
    # parse_board_platform.
    if [ "d$1" != "d" -a -d "$1" ]; then
	find_paths "$1" "$2"
	exit $?
    else
	echo "`basename $0`: \"$1\" is not a directory" 1>&2
	exit 1
    fi
fi

if [ "e${board}" != "e" ]; then
    if echo "${board}" | grep -q "\."; then
        cpu=`echo "${board}" | cut -d. -f2`
        board=`echo "${board}" | cut -d. -f1`
    fi
    board_defn="BOARD=${board}"
fi

if [ "f${cpu}" != "f" ]; then
    cpu_defn="CPU=${cpu}"
fi

if [ "g${quiet}" != "g" ]; then
    if [ "h${friendly}" != "h" ]; then
	usage
        echo "`basename $0`: friendly(-f) and quiet(-q)" \
	     "options are incompatible" 1>&2
        exit 2
    fi
    if [ "j${definition}" != "j" ]; then
	usage
        echo "`basename $0`: type(-t) and quiet(-q)" \
	     "options are incompatible" 1>&2
        exit 2
    fi
fi

if [ "k${friendly}" != "k" ]; then
    if [ "m${definition}" != "m" ]; then
	usage
        echo "`basename $0`: friendly(-f) and type(-t)" \
	     "options are incompatible" 1>&2
        exit 2
    fi
fi

# Identify standard board directories and boards.txt files
#
if [ "n${use_dno_default_paths}" = "nyes" ]; then
    board_paths="`default_board_paths` ${board_paths}"
fi

if [ "p${board_paths}" = "p" ]; then
    usage
    echo "`basename $0`: no board paths provided." 1>&2
    exit 2
fi

if [ "q${params}" = "q" ]; then
    identify_boards ${board_defn} ${cpu_defn} ${quiet} ${definition} \
		    ${friendly} "${board_paths}"
    exit $?
fi


# We get here if the params option has been provided.  In this case,
# identify_boards will be silent except for identifying the source
# file for our board.

if filename=`identify_boards ${board_defn} ${cpu_defn} SILENT=yes \
   			  PRINT_FILENAME=yes "${board_paths}"`; then
    parse_board_platform "${filename}" ${board} ${cpu}
    exit $?
else
    echo "`basename $0`: Invalid/incomplete board/cpu" \
         "options provided." 1>&2
    exit 2
fi

exit $?

